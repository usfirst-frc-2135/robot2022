// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.StatorCurrentLimitConfiguration;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.SupplyCurrentLimitConfiguration;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

import edu.wpi.first.wpilibj.DataLogManager;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.frc2135.PhoenixUtil;
import frc.robot.frc2135.RobotConfig;

/**
 *
 */
public class TowerConveyor extends SubsystemBase
{
  private int                             VCONVEYOR_STOP        = null;
  private WPI_TalonFX                     motorTC9;
  private DigitalInput                    cargoDetect;
  private boolean                         talonValidVC9;
  private WPI_TalonFX                     motorVC9              = new WPI_TalonFX(9);
  private DigitalInput                    cargoDetected         = new DigitalInput(2);
  private double                          acquireSpeed;
  private double                          acquireSpeedSlow;
  private double                          expelSpeed;
  private double                          expelSpeedFast;
  private WPI_TalonFX                     m_cargoDetected;
  private SupplyCurrentLimitConfiguration m_supplyCurrentLimits = new SupplyCurrentLimitConfiguration(true, 45.0, 45.0,
      0.00);
  private StatorCurrentLimitConfiguration m_statorCurrentLimits = new StatorCurrentLimitConfiguration(true, 80.0, 80.0,
      0.001);
  private final int                       kCANTimeout           = 30;
  private int                             resetCountVC9;

  /**
   *
   */
  public TowerConveyor( )
  {
    // cargoDetect = new DigitalInput(0);
    // addChild("CargoDetect", cargoDetect);
    motorTC9 = new WPI_TalonFX(9);

    setName("Vertical Conveyor");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    setSubsystem("Vertical Conveyor");

    talonValidVC9 = PhoenixUtil.getInstance( ).talonFXInitialize(motorVC9, "VC9");
    SmartDashboard.putBoolean("HL_VC9Valid", talonValidVC9);

    RobotConfig config = RobotConfig.getInstance( );
    acquireSpeed = config.getValueAsDouble("VC_AcquireSpeed", 1.0);
    acquireSpeedSlow = config.getValueAsDouble("VC_AcquireSpeedSlow", 0.2);
    expelSpeed = config.getValueAsDouble("VC_expelSpeed", -0.2);
    expelSpeedFast = config.getValueAsDouble("VC_expelSpeedFast", -1.0);

    if (talonValidVC9)
    {
      motorVC9.setInverted(false);
      motorVC9.setNeutralMode(NeutralMode.Coast);
      motorVC9.set(ControlMode.PercentOutput, 0.0);

      motorVC9.configSupplyCurrentLimit(m_supplyCurrentLimits);
      motorVC9.configStatorCurrentLimit(m_statorCurrentLimits);

      motorVC9.setStatusFramePeriod(StatusFrame.Status_1_General, 255, kCANTimeout);
      motorVC9.setStatusFramePeriod(StatusFrame.Status_2_Feedback0, 255, kCANTimeout);
    }

    initialize( );
  }

  @Override
  public void periodic( )
  {
    // This method will be called once per scheduler run
    if (motorVC9.hasResetOccurred( ))
    {
      resetCountVC9 += 1;
      SmartDashboard.putNumber("HL_Resets_VC9", resetCountVC9);
    }
  }

  @Override
  public void simulationPeriodic( )
  {
    // This method will be called once per scheduler run when in simulation
  }

  public void initialize( )
  {
    DataLogManager.log("VC Init");
    setVerticalConveyorSpeed(VCONVEYOR_STOP);
  }

  public void faultDump( )
  {
    PhoenixUtil.getInstance( ).talonFXFaultDump(motorVC9, "VC 9");
  }

  // Set mode of conveyor
  public void setVerticalConveyorSpeed(int mode)
  {
    const char *strName;
    double outputVC = 0.0; // Default: off

    switch (mode)
    {
        default:
        case VCONVEYOR_STOP:
            strName = "STOP";
            outputVC = 0.0;
            break;
        case VCONVEYOR_ACQUIRE:
            strName = "ACQUIRE";
            outputVC = m_acquireSpeed;
            break;
        case VCONVEYOR_ACQUIRE_SLOW:
            strName = "ACQUIRE_SLOW";
            outputVC = m_acquireSpeedSlow;
            break;
        case VCONVEYOR_EXPEL:
            strName = "EXPEL";
            outputVC = m_expelSpeed;
            break;
        case VCONVEYOR_EXPEL_FAST:
            strName = "EXPEL_FAST";
            outputVC = m_expelSpeedFast;
            break;
    }

    DataLogManager.log(getSubsystem( ) + "VC Set Speed");

    if (m_talonValidVC9)
        m_motorVC9.Set(ControlMode::PercentOutput, outputVC);
    }

  boolean isCargoDetected( )
  {
    boolean cargoDetected;
    if (m_cargoDetected.get( ) == 0)
    {
      cargoDetected = true;

    }
    else
    {
      cargoDetected = false;
    }

    SmartDashboard.putBoolean("VC_cargoDetected", cargoDetected);
    return cargoDetected;
  }

  // Put methods for controlling this subsystem
  // here. Call these from Commands.
}

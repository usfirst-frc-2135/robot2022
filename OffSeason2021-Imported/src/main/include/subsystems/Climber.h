// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once
#include <frc/XboxController.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "ctre/Phoenix.h"

#include <frc/Solenoid.h>
#include <frc2/command/SubsystemBase.h>

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

/**
 *
 *
 * @author ExampleAuthor
 */
class Climber : public frc2::SubsystemBase
{
private:
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities

#ifdef __FRC_ROBORIO__
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frc::Solenoid m_brake{ 0, frc::PneumaticsModuleType::CTREPCM, 1 };
    WPI_TalonFX m_motorCL14{ 14 };

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
#else
    frc::Solenoid m_brake{ 0, frc::PneumaticsModuleType::CTREPCM, 1 };
    WPI_TalonSRX m_motorCL14{ 14 };
#endif

    // Declare constants
    const int m_climberDebug = 0; // DEBUG flag to disable/enable extra logging calls
    const int kCANTimeout = 10;   // CAN timeout in msec to wait for response

    // Declare module variables
    bool m_talonValidCL14; // Health indicator for intake Talon 6

    bool m_joystickCLZeroed;
    double m_upSpeed;
    double m_downSpeed;
    double m_deadband = 0.2;

public:
    Climber();

    void Periodic() override;
    void SimulationPeriodic() override;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    void Initialize(void);
    void FaultDump(void);
    void RaiseClimberWithJoysticks(frc::XboxController *operatorController);
    void SetBrakeSolenoid(bool climberBraking);
    void SetClimberStopped(void);

    const bool CL_BRAKE_LOCKED = false;
    const bool CL_BRAKE_UNLOCKED = true;
    enum
    {
        CLIMBER_INIT = -2,
        CLIMBER_DOWN = -1,
        CLIMBER_STOPPED = 0,
        CLIMBER_UP = 1
    };
};

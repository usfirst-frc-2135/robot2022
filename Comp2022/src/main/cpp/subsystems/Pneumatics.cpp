// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <spdlog/fmt/ostr.h>
#include <spdlog/spdlog.h>
#include <units/current.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "subsystems/Pneumatics.h"

#include <frc/smartdashboard/SmartDashboard.h>

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Pneumatics::Pneumatics()
{
    SetName("Pneumatics");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SetSubsystem("Pneumatics");

    AddChild("PCM", &m_compressor);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Pneumatics::Periodic()
{
    static int periodicInterval = 0;

    // Put code here to be run every 20 ms loop

    // Only update indicators every 100 ms to cut down on network traffic
    if ((m_pneumaticsDebug > 0) && (periodicInterval++ % 5 == 0))
        frc::SmartDashboard::PutNumber("PCM_Output_Comp", m_pcm.GetCompressorCurrent().to<double>());
}

void Pneumatics::SimulationPeriodic()
{
    // This method will be called once per scheduler run when in simulation
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Pneumatics::Initialize(void)
{
    spdlog::info("PCM Init");
}

void Pneumatics::FaultDump(void)
{
    // Print out PCM faults and clear sticky ones
    spdlog::info("----- PCM FAULTS --------------");

    if (m_pcm.GetCompressorCurrentTooHighFault())
        spdlog::warn("CurrentTooHighFault");
    if (m_pcm.GetCompressorNotConnectedFault())
        spdlog::warn("CompressorNotConnectedFault");
    if (m_pcm.GetCompressorShortedFault())
        spdlog::warn("CompressorShortedFault");
    if (m_pcm.GetSolenoidVoltageFault())
        spdlog::warn("SolenoidVoltageFault");

    m_pcm.ClearAllStickyFaults();
}

// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "commands/AutoDriveLimelightShoot.h"

#include "commands/AutoDrivePath.h"
#include "commands/AutoStop.h"
#include "commands/AutoWait.h"
#include "commands/DriveLimelight.h"
#include "commands/IntakeDeploy.h"
#include "commands/IntakingAction.h"
#include "commands/ScoringActionLowHub.h"
#include "commands/ScoringPrime.h"
#include "commands/ScoringStop.h"
#include "frc2135/RobotConfig.h"

#include <frc/smartdashboard/SmartDashboard.h>
#include <frc2/command/ParallelCommandGroup.h>
#include <frc2/command/ParallelRaceGroup.h>
#include <frc2/command/SelectCommand.h>
#include <frc2/command/WaitUntilCommand.h>
#include <spdlog/spdlog.h>
#include <wpi/SmallString.h>

AutoDriveLimelightShoot::AutoDriveLimelightShoot(
    Drivetrain *drivetrain,
    Intake *intake,
    FloorConveyor *fConv,
    VerticalConveyor *vConv,
    Shooter *shooter,
    Vision *vision)
{
    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("AutoDriveLimelightShoot");

    // Add your commands here, e.g.
    // AddCommands(FooCommand(), BarCommand());
    frc2135::RobotConfig *config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsString("AutoDriveLimelightShoot_path1", m_pathname1, "forward39");
    config->GetValueAsString("AutoDriveLimelightShoot_path2", m_pathname2, "backward39");
    spdlog::info("AutoDriveLimelightShoot pathname 1 {}", m_pathname1.c_str());
    spdlog::info("AutoDriveLimelightShoot pathname 2 {}", m_pathname2.c_str());

    // AddCommands(
    //     IntakeDeploy(true),
    //     AutoWait(drivetrain),
    //     AutoDrivePath(m_pathname1.c_str(), true, drivetrain),
    //     //drive backwards until target is valid
    //     frc2::ParallelCommandGroup{ DriveLimelight(true, drivetrain, vision), ScoringPrime(shooter) },
    //     frc2::ParallelCommandGroup{ DriveLimelight(false, drivetrain, vision),
    //                                 ScoringAction(10_s, intake, fConv, vConv, shooter) }
    //     // drive limelight servo instead of drive limelight in parallel with scoringaction
    // );

    AddCommands( // Sequential command
        frc2::ParallelDeadlineGroup{ IntakeDeploy(true), AutoStop(drivetrain) },
        AutoWait(drivetrain),
        frc2::ParallelDeadlineGroup{ ScoringActionHighHub(2_s, intake, fConv, vConv, shooter), AutoStop(drivetrain) },
        frc2::ParallelDeadlineGroup{
            frc2::ParallelDeadlineGroup{
                frc2::WaitUntilCommand([drivetrain] { return drivetrain->RamseteFollowerIsFinished(); }),
                AutoDrivePath(m_pathname1.c_str(), true, drivetrain) },
            IntakingAction(intake, fConv, vConv),
            ShooterRun(Shooter::SHOOTERSPEED_HIGHHUB, shooter) },
        frc2::ParallelDeadlineGroup{
            frc2::ParallelDeadlineGroup{
                frc2::WaitUntilCommand([drivetrain] { return drivetrain->RamseteFollowerIsFinished(); }),
                AutoDrivePath(m_pathname2.c_str(), false, drivetrain) },
            ScoringPrime(shooter) },
        DriveLimelight(true, drivetrain, vision),
        //    .WithInterrupt([drivetrain] { return !drivetrain->LimelightSanityCheck(); }),
        // frc2::SelectCommand{
        //     [drivetrain] { return drivetrain->LimelightSanityCheck(); },
        //     std::pair{ LIMELIGHT, DriveLimelightShoot(drivetrain, intake, fConv, vConv, shooter, vision) },
        //     std::pair{ NO_LIMELIGHT, ScoringAction(5_s, intake, fConv, vConv, shooter) }},
        frc2::ParallelDeadlineGroup{ ScoringActionLowHub(5_s, intake, fConv, vConv, shooter), AutoStop(drivetrain) },
        ScoringStop(intake, fConv, vConv, shooter));
}

bool AutoDriveLimelightShoot::RunsWhenDisabled() const
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
}
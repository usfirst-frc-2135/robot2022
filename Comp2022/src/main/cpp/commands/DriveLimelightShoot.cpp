// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "commands/DriveLimelightShoot.h"

#include "commands/DriveLimelight.h"
#include "commands/ScoringActionHighHub.h"
#include "commands/ScoringPrime.h"

#include <frc/smartdashboard/SmartDashboard.h>
#include <frc2/command/ParallelCommandGroup.h>
#include <frc2/command/ParallelRaceGroup.h>

DriveLimelightShoot::DriveLimelightShoot(
    Drivetrain *drivetrain,
    Intake *intake,
    FloorConveyor *fConv,
    VerticalConveyor *vConv,
    Shooter *shooter,
    Vision *vision)
{
    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("DriveLimelightShoot");

    // Add your commands here, e.g.
    // AddCommands(FooCommand(), BarCommand());

    AddCommands(
        //drive backwards until target is valid
        frc2::ParallelCommandGroup{
            DriveLimelight(true, drivetrain, vision),
            frc2::SequentialCommandGroup{
                frc2::ParallelRaceGroup{
                    frc2::WaitUntilCommand([drivetrain] { return drivetrain->MoveWithLimelightIsFinished(); }),
                    //},
                    ScoringPrime(shooter) },
                ScoringActionHighHub(120_s, intake, fConv, vConv, shooter) }

        });
}

bool DriveLimelightShoot::RunsWhenDisabled() const
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
}
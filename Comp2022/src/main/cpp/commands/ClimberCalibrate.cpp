// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "RobotContainer.h"

#include <frc/smartdashboard/SmartDashboard.h>
#include <spdlog/spdlog.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

#include "commands/ClimberCalibrate.h"

ClimberCalibrate::ClimberCalibrate(Climber *m_climber) : m_climber(m_climber)
{
    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("ClimberCalibrate");
    AddRequirements(m_climber);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
}

// Called just before this Command runs the first time
void ClimberCalibrate::Initialize()
{
    spdlog::info("ClimberCalibrate - Init");
    m_calibrateTimer.Reset();
    m_climber->MoveToCalibrate();
    m_calibrateTimer.Start();
}

// Called repeatedly when this Command is scheduled to run
void ClimberCalibrate::Execute() {}

// Make this return true when this Command no longer needs to run execute()
bool ClimberCalibrate::IsFinished()
{
    return m_calibrateTimer.HasElapsed(1.0_s);
}

// Called once after isFinished returns true
void ClimberCalibrate::End(bool interrupted)
{
    spdlog::info("ClimberCalibrate - End");
    m_calibrateTimer.Stop();
    m_climber->Calibrate();
}

bool ClimberCalibrate::RunsWhenDisabled() const
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
}

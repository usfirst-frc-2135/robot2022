// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "RobotContainer.h"
#include "frc2135/RobotConfig.h"

#include <spdlog/spdlog.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

#include "commands/ShooterRunTimeout.h"

ShooterRunTimeout::ShooterRunTimeout(int shooterState, Shooter *m_shooter) :
    m_shooterState(shooterState),
    m_shooter(m_shooter)
{
    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("ShooterRunTimeout");
    AddRequirements(m_shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
}

// Called just before this Command runs the first time
void ShooterRunTimeout::Initialize()
{
    spdlog::info("ShooterRunTimeout - Init {}", m_shooterState);
    m_shooter->SetShooterSpeed(m_shooterState);

    double shooterTimeout;
    frc2135::RobotConfig *config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsDouble("AUTO_ShootTime", shooterTimeout, 1.0);

    m_shooterTimeout = shooterTimeout * 1.0_s;
    m_shooterTimer.Reset();
    m_shooterTimer.Start();
}

// Called repeatedly when this Command is scheduled to run
void ShooterRunTimeout::Execute() {}

// Make this return true when this Command no longer needs to run execute()
bool ShooterRunTimeout::IsFinished()
{
    if (m_shooterTimer.Get() >= m_shooterTimeout)
    {
        spdlog::info("Shooter timer has timed out");
        m_shooterTimer.Stop();
        return true;
    }
    return false;
}

// Called once after isFinished returns true
void ShooterRunTimeout::End(bool interrupted)
{
    // Check to see if the Shooter Timer has timed out
    spdlog::info("ShooterRunTimeout - End");
}

bool ShooterRunTimeout::RunsWhenDisabled() const
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
}

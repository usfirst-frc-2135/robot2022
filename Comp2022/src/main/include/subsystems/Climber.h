// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once
#include <frc/XboxController.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Constants.h"
#include "ctre/Phoenix.h"

#include <frc/Solenoid.h>
#include <frc2/command/SubsystemBase.h>

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

using namespace units::time;
/**
 *
 *
 * @author ExampleAuthor
 */
class Climber : public frc2::SubsystemBase
{
private:
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frc::Solenoid m_brake{ 0, frc::PneumaticsModuleType::CTREPCM, 1 };
    WPI_TalonFX m_motorCL14{ 14 };

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Declare constants
    const int m_climberDebug = 0; // DEBUG flag to disable/enable extra logging calls
    const int kCANTimeout = 10;   // CAN timeout in msec to wait for response

    // Declare module variables
    bool m_talonValidCL14; // Health indicator for climber Talon 14

    bool m_joystickCLZeroed;
    double m_upSpeed;
    double m_downSpeed;
    double m_deadband = 0.2;

    double m_targetInches;   // Target inches of height that are requested of the climber
    int m_targetCounts;      // Target encoder counts of height that are requested of the climber
    double m_curInches;      // Current elevator height in inches
    bool m_calibrated;       // Indicates whether the climber has been calibrated
    int m_calibrationState;  // State variable for calibration sequence
    bool m_isMoving = false; // State of whether the climber is moving or stationary

    frc::Timer m_safetyTimer; // Safety timer for use in elevator
    second_t m_safetyTimeout; // Seconds that the timer ran before stopping

    // Config file parameters
    double m_calibrationSpeed; // Motor output speed used during calibration
    double m_peakOut;          // Climber maximum speed during movement
    int m_velocity;            // Climber motion velocity
    int m_acceleration;        // Climber motion acceleration
    int m_sCurveStrength;      // Climber motion S curve smoothing strength
    double m_pidKf;            // Climber PID force constant
    double m_pidKp;            // Climber PID proportional constant
    double m_pidKi;            // Climber PID integral constant
    double m_pidKd;            // Climber PID derivative constant
    double m_neutralDeadband;  // Climber PID neutral deadband in percent
    double m_CLRampRate;       // Climber PID ramp rate
    int m_CLAllowedError;      // Climber PID allowable closed loop error in counts
    double m_toleranceInches;  // Climber PID tolerance in inches
    double m_toleranceDegrees; // Climber PID tolerance in degrees
    int m_climberMinCounts;    // Climber minimum allowable counts
    int m_climberMaxCounts;    // Climber maximum allowable counts
    double m_climberMinAngle;  // Climber minimum angle at upper hard stop
    double m_climberMaxAngle;  // Climber maximum angle at lower hard stop
    double m_calibAngle;       // Angle at which the robot is being calibrated (hard stop down)

    double m_climberMaxHeight; // Climber maximum allowable height
    double m_climberMinHeight; // Climber minimum allowable height
    double m_rung1Height;      // Setpoint for 1st monkey bar
    double m_rung2Height;      // Setpoint for 2nd monkey bar
    double m_rung3Height;      // Setpoint for 3rd monkey bar
    double m_rung4Height;      // Setpoint for 4th monkey bar

    const double m_circumInches = (0.428 * M_PI); // Circumference in inches

public:
    Climber();

    void Periodic() override;
    void SimulationPeriodic() override;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    void Initialize(void);
    void FaultDump(void);
    void RaiseClimberWithJoysticks(frc::XboxController *operatorController);
    void SetBrakeSolenoid(bool climberBraking);
    void SetClimberStopped(void);

    const bool CL_BRAKE_LOCKED = false;
    const bool CL_BRAKE_UNLOCKED = true;
    enum
    {
        CLIMBER_INIT = -2,
        CLIMBER_DOWN = -1,
        CLIMBER_STOPPED = 0,
        CLIMBER_UP = 1
    };

    double InchesToCounts(double inches);
    double CountsToInches(int counts);
    double GetCurrentInches(void);
    double GetCurrentArbFeedForward(void);
    void SetClimberSpeed();
    void CalibrationOverride();

    // Motion Magic - Moving to a position
    void MoveClimberDistanceInit(double inches);
    bool MoveClimberDistanceIsFinished(void);
};
